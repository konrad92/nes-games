;
; File generated by cc65 v 2.14 - Git 1e4a745
;
	.fopt		compiler,"cc65 v 2.14 - Git 1e4a745"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_scroll
	.import		_ppu_init
	.import		_vram_seek
	.import		_vram_put
	.export		_spr
	.export		_bgAttr
	.export		_puts
	.export		_sync
	.export		_main

.segment	"DATA"

_spr:
	.word	$0000

.segment	"RODATA"

_bgAttr:
L004C:
	.byte	$48,$45,$4C,$4C,$4F,$20,$31,$32,$33,$2E,$2C,$0A,$54,$45,$53,$54
	.byte	$54,$45,$53,$54,$00

; ---------------------------------------------------------------
; void __near__ puts (unsigned char, unsigned char, unsigned char, __near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_puts: near

.segment	"CODE"

	ldy     #$04
	lda     (sp),y
	tax
	lda     #$00
	jsr     shlax2
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	sta     ptr1
	lda     #$20
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	jsr     shlax4
	jsr     shlax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L005F
	inx
L005F:	jsr     _vram_seek
	jmp     L000D
L000B:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$0A
	beq     L001F
	cmp     #$20
	beq     L0013
	cmp     #$2C
	beq     L0017
	cmp     #$2E
	beq     L001B
	jmp     L0028
L0013:	tya
	jmp     L0061
L0017:	lda     #$26
	jmp     L0061
L001B:	lda     #$25
	jmp     L0061
L001F:	ldy     #$04
	lda     (sp),y
	tax
	lda     #$00
	jsr     shlax2
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$20
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$04
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jsr     shlax4
	jsr     shlax1
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0060
	inx
L0060:	jsr     _vram_seek
	jmp     L0011
L0028:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$41
	bcc     L0029
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	ldy     #$41
	jsr     decaxy
	clc
	adc     #$01
	jmp     L0061
L0029:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$30
	bcc     L0011
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	ldy     #$30
	jsr     decaxy
	ldy     #$1B
	jsr     incaxy
L0061:	jsr     _vram_put
L0011:	jsr     ldax0sp
	jsr     incax1
	jsr     stax0sp
L000D:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jne     L000B
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ sync (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sync: near

.segment	"CODE"

	lda     _scroll
	cmp     #$F0
	bcs     L0062
	inc     _scroll
	jmp     L0038
L0062:	lda     #$FF
	sta     _scroll
L0038:	lda     _spr
	sta     ptr1
	lda     _spr+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldx     #$02
	lda     #$00
	sta     _spr
	stx     _spr+1
	sta     ptr1
	stx     ptr1+1
	lda     #$80
	ldy     #$03
	sta     (ptr1),y
	lda     _spr
	sta     ptr1
	lda     _spr+1
	sta     ptr1+1
	lda     #$80
	ldy     #$00
	sta     (ptr1),y
	lda     _spr
	sta     ptr1
	lda     _spr+1
	sta     ptr1+1
	txa
	iny
	sta     (ptr1),y
	lda     _spr
	sta     ptr1
	lda     _spr+1
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
	lda     #$01
	jsr     pusha
	lda     #$05
	jsr     pusha
	jsr     pusha
	lda     #<(L004C)
	ldx     #>(L004C)
	jsr     pushax
	jsr     _puts
	lda     #$80
	jsr     pusha
	lda     #$1E
	jsr     _ppu_init
L0063:	jmp     L0063

.endproc

